- name: Gather facts and save to file
  hosts: all
  gather_facts: true
  tasks:
    - name: Get current hostname
      ansible.builtin.command: hostname
      register: current_hostname

    - name: Debug
      ansible.builtin.debug:
        msg: "{{ current_hostname.stdout }}::{{ name }}"

    - name: Check hostname
      ansible.builtin.fail:
        msg: "Hostname does not match desired hostname: {{ name }}"
      when: current_hostname.stdout != name

    - name: install curl
      ansible.builtin.apt:
        name: curl
        state: latest
        update_cache: true
      become: true

    - name: Get external IP
      ansible.builtin.shell: curl ifconfig.co -4
      register: current_external_ip
      changed_when: false

    - name: Check external IP
      ansible.builtin.fail:
        msg: "External IP {{ current_external_ip.stdout }} does not match desired IP: {{ external_ip_address }}"
      when: current_external_ip.stdout != external_ip_address

    - name: Get service status
      ansible.builtin.service_facts:

    - name: Check pve-cluster service
      ansible.builtin.set_fact:
        pve_cluster_running: "{{ 'pve-cluster.service' in ansible_facts.services and ansible_facts.services['pve-cluster.service'].state == 'running' }}"

    - name: Check k3s service
      ansible.builtin.set_fact:
        k3s_running: "{{ 'k3s.service' in ansible_facts.services and ansible_facts.services['k3s.service'].state == 'running' }}"

    - name: Save facts to file on local
      ansible.builtin.copy: 
        content: "{{ ansible_facts | combine({'pve_cluster_running': pve_cluster_running, 'k3s_running': k3s_running}) | to_nice_json }}"
        dest: "/tmp/enso-probe-output.txt"

    - name: Fetch the file to local
      ansible.builtin.fetch:
        src: "/tmp/enso-probe-output.txt"
        dest: "output.txt"
        flat: true
